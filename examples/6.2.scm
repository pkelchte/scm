(define north-loop (lambda (south) (begin (-> south 0) (north-loop south))))
(define east-loop (lambda (west) (begin (<- west) (east-loop west))))
(define center-loop (lambda (north east south west aij) (begin (define x (<- west)) (-> east x) (-> south (+ (* aij x) (<- north))) (center-loop north east south west aij))))
(define make-center (lambda (north west aij) (begin (define east (make-chan 0)) (define south (make-chan 0)) (go (center-loop north east south west aij)) (cons east south))))
(define east (lambda (center) (car center)))
(define south (lambda (center) (car (cdr center))))
(define null? (lambda (lis) (equal? lis (quote ()))))
(define make-matrix (lambda (north-ports west-ports south-ports i a) (if (null? a) south-ports (begin (define corner (make-center (<- north-ports) (<- west-ports) (car (car (car a))))) (define eastwing-ports (make-chan (- i 1))) (define southwing-ports (make-chan (- i 1))) (chain-east (east corner) north-ports eastwing-ports (cdr (car (car a)))) (-> south-ports (chain-south (south corner) west-ports southwing-ports (car (cdr (car a))))) (make-matrix eastwing-ports southwing-ports south-ports (- i 1) (cdr a))))))
(define chain-east (lambda (west north-ports south-ports aix) (if (null? aix) (go (east-loop west)) (begin (define cur (make-center (<- north-ports) west (car aix))) (-> south-ports (south cur)) (chain-east (east cur) north-ports south-ports (cdr aix))))))
(define chain-south (lambda (north west-ports east-ports axj) (if (null? axj) north (begin (define cur (make-center north (<- west-ports) (car axj))) (-> east-ports (east cur)) (chain-south (south cur) west-ports east-ports (cdr axj))))))
(define add-port (lambda (queue) (begin (define port (make-chan 0)) (-> queue port) port)))
(define make-northwing (lambda (i) (begin (define south-ports (make-chan i)) (define add-northloops (lambda (i) (if (equal? i 0) 0 (begin (define south (add-port south-ports)) (go (north-loop south)) (add-northloops (- i 1)))))) (add-northloops i) south-ports)))
(define north-ports (make-northwing 3))
(define west-ports (make-chan 3))
(define x (add-port west-ports))
(define y (add-port west-ports))
(define z (add-port west-ports))
(define a (quote (((4 5 6) (6 4)) ((5 4) (6)) ((5) ()))))
(define multiplicator (make-matrix north-ports west-ports (make-chan 3) 3 a))
(define xo (<- multiplicator))
(define yo (<- multiplicator))
(define zo (<- multiplicator))
